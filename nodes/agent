#!/usr/bin/env python

# Name: Phuc Tran and Andy Kotz
# Task: Agent to receive the path of nodes to travel to

# Python libraries
import rospy
import json
import networkx as nx 

# Message Libraries
from std_msgs.msg import String

TASK_PATH_DICT_PARAM = "task_path_dict"

class Agent: 
    def __init__(self):
        """Constructor."""
        self.name = rospy.get_name()
        self.task_path = []
        self.location_graph = nx.Graph()
        self.steiner_node_list = []

        # Setting up subscribers
        rospy.Subscriber(TASK_PATH_DICT_PARAM, String, self._allocation_dict_callback, queue_size=1)
                
    def _allocation_dict_callback(self, msg):
        """Saving the list of nodes to travel to."""
        task_path_dict = json.loads(msg.data)
        self.task_path = task_path_dict[self.name[1:]][1:]
        rospy.loginfo(self.task_path)
    
    def spin(self):
        while not rospy.is_shutdown():
            rospy.sleep(2)
    
def main():

    # Initialization of node
    rospy.init_node("tfbroadcaster")

    # Initialization of the class for the simple motion
    agent_bot = Agent()
    
    try:
        agent_bot.spin()
    except rospy.ROSInterruptException:
        rospy.logerr("ROS node interrupted.")

if __name__ == "__main__":
    """Run the auctioneer."""
    main()
